// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Church represents a church/organization
model Church {
  id          String   @id @default(cuid())
  name        String
  address     String?
  phone       String?
  email       String?
  logo        String?  // URL to logo file
  stripeCustomerId String? @unique
  subscriptionStatus String @default("trial") // trial, active, suspended
  subscriptionEnds DateTime?
  referralCode String @unique @default(cuid())
  referredBy  String? // Church ID that referred this church
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users       User[]
  events      Event[]
  groups      Group[]
  eventTypes  EventType[]
  customRoles CustomRole[]
  invitations Invitation[]
  communications Communication[]
  referrals   Referral[]
  activities  Activity[]
  eventTemplates EventTemplate[]

  @@map("parishes")
}

// User represents both directors/pastors and musicians
model User {
  id           String   @id @default(cuid())
  email        String   @unique
  phone        String?
  firstName    String
  lastName     String
  password     String
  role         UserRole @default(MUSICIAN)
  isVerified   Boolean  @default(false)
  emailNotifications Boolean @default(true)
  smsNotifications   Boolean @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  churchId     String
  church       Church @relation(fields: [churchId], references: [id], onDelete: Cascade)
  
  groupMemberships GroupMember[]
  eventAssignments EventAssignment[]
  uploadedFiles    MusicFile[]
  sentCommunications Communication[]

  @@map("users")
}

// Predefined and custom roles
enum UserRole {
  DIRECTOR
  PASTOR
  ASSOCIATE_PASTOR
  MUSICIAN
}

model CustomRole {
  id        String   @id @default(cuid())
  name      String
  churchId  String
  church    Church   @relation(fields: [churchId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  eventAssignments EventAssignment[]

  @@unique([name, churchId])
  @@map("custom_roles")
}

// Event types defined by each church
model EventType {
  id        String   @id @default(cuid())
  name      String
  color     String   @default("#3B82F6") // Hex color for calendar
  churchId  String
  church    Church   @relation(fields: [churchId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  events Event[]

  @@unique([name, churchId])
  @@map("event_types")
}

// Events (masses, services, etc.)
model Event {
  id          String    @id @default(cuid())
  name        String
  description String?
  location    String
  startTime   DateTime
  endTime     DateTime?
  isRecurring Boolean   @default(false)
  recurrencePattern String? // JSON string for recurrence rules
  recurrenceEnd DateTime?
  parentEventId String? // For recurring events
  templateId  String?   // Reference to EventTemplate if created from template
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  churchId    String
  church      Church    @relation(fields: [churchId], references: [id], onDelete: Cascade)
  
  eventTypeId String
  eventType   EventType @relation(fields: [eventTypeId], references: [id])
  
  template    EventTemplate? @relation(fields: [templateId], references: [id])
  
  assignments EventAssignment[]
  musicFiles  MusicFile[]
  communications Communication[]

  @@map("events")
}

// Groups of musicians
model Group {
  id          String   @id @default(cuid())
  name        String
  description String?
  churchId    String
  church      Church   @relation(fields: [churchId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  members GroupMember[]
  assignments EventAssignment[]

  @@unique([name, churchId])
  @@map("groups")
}

model GroupMember {
  id       String @id @default(cuid())
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  groupId  String
  group    Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  joinedAt DateTime @default(now())

  @@unique([userId, groupId])
  @@map("group_members")
}

// Event assignments for musicians and groups
model EventAssignment {
  id         String            @id @default(cuid())
  eventId    String
  event      Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  // Can be assigned to individual user OR group
  userId     String?
  user       User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  groupId    String?
  group      Group?           @relation(fields: [groupId], references: [id], onDelete: Cascade)
  
  // Role for this assignment
  roleName   String?          // For standard roles like "Vocalist", "Accompanist"
  customRoleId String?
  customRole   CustomRole?    @relation(fields: [customRoleId], references: [id])
  
  maxMusicians Int?           // For group assignments
  status     AssignmentStatus @default(PENDING)
  assignedAt DateTime         @default(now())
  respondedAt DateTime?

  @@map("event_assignments")
}

enum AssignmentStatus {
  PENDING
  ACCEPTED
  DECLINED
  CANCELLED
}

// Music files attached to events
model MusicFile {
  id          String   @id @default(cuid())
  filename    String
  originalName String
  fileUrl     String
  fileSize    Int
  mimeType    String
  eventId     String
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  uploadedBy  String
  uploader    User     @relation(fields: [uploadedBy], references: [id])
  uploadedAt  DateTime @default(now())

  @@map("music_files")
}

// Invitations to join church
model Invitation {
  id        String           @id @default(cuid())
  email     String
  firstName String?
  lastName  String?
  phone     String?
  role      UserRole         @default(MUSICIAN)
  status    InvitationStatus @default(PENDING)
  token     String           @unique @default(cuid())
  expiresAt DateTime
  churchId  String
  church    Church           @relation(fields: [churchId], references: [id], onDelete: Cascade)
  invitedBy String
  createdAt DateTime         @default(now())

  @@unique([email, churchId])
  @@map("invitations")
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}

// Communication history
model Communication {
  id        String              @id @default(cuid())
  subject   String
  message   String
  type      CommunicationType
  
  // Targeting
  churchId  String
  church    Church              @relation(fields: [churchId], references: [id], onDelete: Cascade)
  
  eventId   String?             // If related to specific event
  event     Event?              @relation(fields: [eventId], references: [id])
  
  sentBy    String
  sender    User                @relation(fields: [sentBy], references: [id])
  
  recipients String[]           // Array of user IDs or "all"
  
  sentAt    DateTime            @default(now())

  @@map("communications")
}

enum CommunicationType {
  EMAIL
  SMS
  BOTH
}

// Referral tracking
model Referral {
  id              String   @id @default(cuid())
  referringChurchId String
  referringChurch   Church @relation(fields: [referringChurchId], references: [id], onDelete: Cascade)
  referredEmail     String
  status            ReferralStatus @default(PENDING)
  completedAt       DateTime?
  createdAt         DateTime @default(now())

  @@map("referrals")
}

enum ReferralStatus {
  PENDING
  COMPLETED
  EXPIRED
}

// Templates for communications
model CommunicationTemplate {
  id        String              @id @default(cuid())
  name      String
  subject   String
  message   String
  type      CommunicationType
  churchId  String
  createdAt DateTime            @default(now())

  @@map("communication_templates")
}

// Admin users for platform management
model AdminUser {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      String   @default("admin")
  createdAt DateTime @default(now())

  @@map("admin_users")
}

// Activity tracking for dashboard recent activity
model Activity {
  id          String       @id @default(cuid())
  type        ActivityType
  description String
  metadata    Json?        // Additional data like event name, musician name, etc.
  createdAt   DateTime     @default(now())
  
  // Relations
  churchId    String
  church      Church       @relation(fields: [churchId], references: [id], onDelete: Cascade)
  
  userId      String?      // User who performed the action
  
  @@map("activities")
}

enum ActivityType {
  EVENT_CREATED
  MUSICIAN_INVITED
  MUSICIAN_SIGNED_UP
  MESSAGE_SENT
}

// Event Templates - for reusable event creation
model EventTemplate {
  id              String   @id @default(cuid())
  name            String
  description     String?
  duration        Int      @default(60) // Duration in minutes
  color           String   @default("#3B82F6")
  isRecurring     Boolean  @default(false)
  recurrencePattern String? // JSON string for default recurrence
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  churchId        String
  church          Church   @relation(fields: [churchId], references: [id], onDelete: Cascade)
  
  events          Event[]    // Events created from this template
  roles           TemplateRole[]
  hymns           TemplateHymn[]

  @@unique([name, churchId])
  @@map("event_templates")
}

// Template Roles - roles that should be filled for events created from template
model TemplateRole {
  id          String   @id @default(cuid())
  name        String
  maxCount    Int      @default(1)
  isRequired  Boolean  @default(false)
  templateId  String
  template    EventTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@map("template_roles")
}

// Template Hymns - default hymns/music for events created from template
model TemplateHymn {
  id          String   @id @default(cuid())
  title       String
  composer    String?
  notes       String?
  templateId  String
  template    EventTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@map("template_hymns")
}
