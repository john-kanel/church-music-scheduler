generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Church {
  id                    String          @id @default(cuid())
  name                  String
  address               String?
  phone                 String?
  email                 String?
  logo                  String?
  stripeCustomerId      String?         @unique
  subscriptionStatus    String          @default("trial")
  subscriptionEnds      DateTime?
  referralCode          String          @unique @default(cuid())
  referredBy            String?
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  referralRewardsEarned Int             @default(0)
  referralRewardsSaved  Decimal         @default(0.00)
  activities            Activity[]
  communications        Communication[]
  customRoles           CustomRole[]
  eventTemplates        EventTemplate[]
  eventTypes            EventType[]
  events                Event[]
  groups                Group[]
  invitations           Invitation[]
  referredChurches      Referral[]           @relation("ReferredChurch")
  referrals             Referral[]           @relation("ReferringChurch")
  users                 User[]
  ownershipTransfers    OwnershipTransfer[]

  @@map("parishes")
}

model User {
  id                 String            @id @default(cuid())
  email              String            @unique
  phone              String?
  firstName          String
  lastName           String
  password           String
  role               UserRole          @default(MUSICIAN)
  isVerified         Boolean           @default(false)
  emailNotifications Boolean           @default(true)
  smsNotifications   Boolean           @default(true)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  churchId           String
  sentCommunications Communication[]
  eventAssignments   EventAssignment[]
  groupMemberships   GroupMember[]
  uploadedFiles      MusicFile[]
  church             Church            @relation(fields: [churchId], references: [id], onDelete: Cascade)

  @@map("users")
}

model CustomRole {
  id               String            @id @default(cuid())
  name             String
  churchId         String
  createdAt        DateTime          @default(now())
  church           Church            @relation(fields: [churchId], references: [id], onDelete: Cascade)
  eventAssignments EventAssignment[]

  @@unique([name, churchId])
  @@map("custom_roles")
}

model EventType {
  id        String   @id @default(cuid())
  name      String
  color     String   @default("#3B82F6")
  churchId  String
  createdAt DateTime @default(now())
  church    Church   @relation(fields: [churchId], references: [id], onDelete: Cascade)
  events    Event[]

  @@unique([name, churchId])
  @@map("event_types")
}

model Event {
  id                String            @id @default(cuid())
  name              String
  description       String?
  location          String
  startTime         DateTime
  endTime           DateTime?
  isRecurring       Boolean           @default(false)
  recurrencePattern String?
  recurrenceEnd     DateTime?
  parentEventId     String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  churchId          String
  eventTypeId       String
  templateId        String?
  communications    Communication[]
  assignments       EventAssignment[]
  church            Church            @relation(fields: [churchId], references: [id], onDelete: Cascade)
  eventType         EventType         @relation(fields: [eventTypeId], references: [id])
  template          EventTemplate?    @relation(fields: [templateId], references: [id])
  musicFiles        MusicFile[]

  @@map("events")
}

model Group {
  id          String            @id @default(cuid())
  name        String
  description String?
  churchId    String
  createdAt   DateTime          @default(now())
  assignments EventAssignment[]
  members     GroupMember[]
  church      Church            @relation(fields: [churchId], references: [id], onDelete: Cascade)

  @@unique([name, churchId])
  @@map("groups")
}

model GroupMember {
  id       String   @id @default(cuid())
  userId   String
  groupId  String
  joinedAt DateTime @default(now())
  group    Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@map("group_members")
}

model EventAssignment {
  id           String           @id @default(cuid())
  eventId      String
  userId       String?
  groupId      String?
  roleName     String?
  customRoleId String?
  maxMusicians Int?
  status       AssignmentStatus @default(PENDING)
  assignedAt   DateTime         @default(now())
  respondedAt  DateTime?
  customRole   CustomRole?      @relation(fields: [customRoleId], references: [id])
  event        Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)
  group        Group?           @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user         User?            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("event_assignments")
}

model MusicFile {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  fileUrl      String
  fileSize     Int
  mimeType     String
  eventId      String
  uploadedBy   String
  uploadedAt   DateTime @default(now())
  event        Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  uploader     User     @relation(fields: [uploadedBy], references: [id])

  @@map("music_files")
}

model Invitation {
  id        String           @id @default(cuid())
  email     String
  firstName String?
  lastName  String?
  phone     String?
  role      UserRole         @default(MUSICIAN)
  status    InvitationStatus @default(PENDING)
  token     String           @unique @default(cuid())
  expiresAt DateTime
  churchId  String
  invitedBy String
  createdAt DateTime         @default(now())
  church    Church           @relation(fields: [churchId], references: [id], onDelete: Cascade)

  @@unique([email, churchId])
  @@map("invitations")
}

model Communication {
  id         String            @id @default(cuid())
  subject    String
  message    String
  type       CommunicationType
  churchId   String
  eventId    String?
  sentBy     String
  recipients String[]
  sentAt     DateTime          @default(now())
  church     Church            @relation(fields: [churchId], references: [id], onDelete: Cascade)
  event      Event?            @relation(fields: [eventId], references: [id])
  sender     User              @relation(fields: [sentBy], references: [id])

  @@map("communications")
}

model Referral {
  id                 String         @id @default(cuid())
  referringChurchId  String
  referredEmail      String
  status             ReferralStatus @default(PENDING)
  completedAt        DateTime?
  createdAt          DateTime       @default(now())
  referralCode       String
  referredChurchId   String?
  referredPersonName String
  rewardProcessed    Boolean        @default(false)
  referredChurch     Church?        @relation("ReferredChurch", fields: [referredChurchId], references: [id], onDelete: Cascade)
  referringChurch    Church         @relation("ReferringChurch", fields: [referringChurchId], references: [id], onDelete: Cascade)

  @@map("referrals")
}

model CommunicationTemplate {
  id        String            @id @default(cuid())
  name      String
  subject   String
  message   String
  type      CommunicationType
  churchId  String
  createdAt DateTime          @default(now())

  @@map("communication_templates")
}

model AdminUser {
  id        String   @id @default(cuid())
  password  String
  email     String   @unique
  createdAt DateTime @default(now())
  role      String   @default("admin")

  @@map("admin_users")
}

model Activity {
  id          String       @id @default(cuid())
  type        ActivityType
  description String
  metadata    Json?
  createdAt   DateTime     @default(now())
  churchId    String
  userId      String?
  church      Church       @relation(fields: [churchId], references: [id], onDelete: Cascade)

  @@map("activities")
}

model EventTemplate {
  id                String         @id @default(cuid())
  name              String
  description       String?
  duration          Int            @default(60)
  color             String         @default("#3B82F6")
  isRecurring       Boolean        @default(false)
  recurrencePattern String?
  isActive          Boolean        @default(true)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  churchId          String
  church            Church         @relation(fields: [churchId], references: [id], onDelete: Cascade)
  events            Event[]
  hymns             TemplateHymn[]
  roles             TemplateRole[]

  @@unique([name, churchId])
  @@map("event_templates")
}

model TemplateRole {
  id         String        @id @default(cuid())
  name       String
  maxCount   Int           @default(1)
  isRequired Boolean       @default(false)
  templateId String
  createdAt  DateTime      @default(now())
  template   EventTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@map("template_roles")
}

model TemplateHymn {
  id         String        @id @default(cuid())
  title      String
  composer   String?
  notes      String?
  templateId String
  createdAt  DateTime      @default(now())
  template   EventTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@map("template_hymns")
}

model OwnershipTransfer {
  id                    String                     @id @default(cuid())
  inviteeEmail          String
  inviteeFirstName      String?
  inviteeLastName       String?
  inviteeRole           UserRole                   // The role they'll have (DIRECTOR, PASTOR, etc.)
  status                OwnershipTransferStatus    @default(PENDING)
  token                 String                     @unique @default(cuid())
  expiresAt             DateTime                   // 30 days from creation
  retireCurrentOwner    Boolean                    @default(false)
  currentOwnerRetireAt  DateTime?                  // Set if retireCurrentOwner is true
  acceptedAt            DateTime?
  completedAt           DateTime?
  createdAt             DateTime                   @default(now())
  updatedAt             DateTime                   @updatedAt
  churchId              String
  invitedBy             String                     // User ID of who sent the invite
  reminderSentAt        DateTime?                  // Track when 20-day reminder was sent
  church                Church                     @relation(fields: [churchId], references: [id], onDelete: Cascade)

  @@unique([inviteeEmail, churchId])
  @@map("ownership_transfers")
}

enum UserRole {
  DIRECTOR
  ASSOCIATE_DIRECTOR
  PASTOR
  ASSOCIATE_PASTOR
  MUSICIAN
}

enum AssignmentStatus {
  PENDING
  ACCEPTED
  DECLINED
  CANCELLED
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}

enum CommunicationType {
  EMAIL
  SMS
  BOTH
}

enum ReferralStatus {
  PENDING
  COMPLETED
  EXPIRED
}

enum ActivityType {
  EVENT_CREATED
  MUSICIAN_INVITED
  MUSICIAN_SIGNED_UP
  MESSAGE_SENT
}

enum OwnershipTransferStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
  COMPLETED
}
