generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Church {
  id                    String               @id @default(cuid())
  name                  String
  address               String?
  phone                 String?
  email                 String?
  logo                  String?
  stripeCustomerId      String?              @unique
  subscriptionStatus    String               @default("trial")
  subscriptionEnds      DateTime?
  referralCode          String               @unique @default(cuid())
  referredBy            String?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  referralRewardsEarned Int                  @default(0)
  referralRewardsSaved  Decimal              @default(0.00)
  paymentEmailSentAt    DateTime?
  referralEmailSentAt   DateTime?
  welcomeEmailSentAt    DateTime?
  activities            Activity[]
  automationSettings    AutomationSettings?
  churchDocuments       ChurchDocument[]
  churchLinks           ChurchLink[]
  communications        Communication[]
  customRoles           CustomRole[]
  emailSchedules        EmailSchedule[]
  eventTypes            EventType[]
  events                Event[]
  groups                Group[]
  hymnals               Hymnal[]
  invitations           Invitation[]
  musicianInviteLink    MusicianInviteLink?
  notificationLogs      NotificationLog[]
  ownershipTransfers    OwnershipTransfer[]
  publicScheduleLinks   PublicScheduleLink[]
  referredChurches      Referral[]           @relation("ReferredChurch")
  referrals             Referral[]           @relation("ReferringChurch")
  serviceParts          ServicePart[]
  users                 User[]

  @@map("parishes")
}

model User {
  id                        String                     @id @default(cuid())
  email                     String                     @unique
  phone                     String?
  firstName                 String
  lastName                  String
  password                  String
  role                      UserRole                   @default(MUSICIAN)
  isVerified                Boolean                    @default(false)
  // New: explicit active flag for musicians; independent of verification
  isActive                  Boolean                    @default(true)
  emailNotifications        Boolean                    @default(true)
  smsNotifications          Boolean                    @default(false)
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  churchId                  String
  timezone                  String                     @default("America/Chicago")
  instruments               String[]                   @default([])
  skillLevel                SkillLevel                 @default(INTERMEDIATE)
  yearsExperience           Int?
  invitedVia                String?
  calendarLink              String?
  hasCompletedOnboarding    Boolean                    @default(false)
  pin                       String?
  privateNotes              String?
  eventServicePartOrder     Json?
  calendarSubscriptions     CalendarSubscription?
  cancellationNotifications CancellationNotification[]
  uploadedChurchDocs        ChurchDocument[]
  createdChurchLinks        ChurchLink[]
  sentCommunications        Communication[]
  emailSchedules            EmailSchedule[]
  eventAssignments          EventAssignment[]
  uploadedDocuments         EventDocument[]
  groupMemberships          GroupMember[]
  uploadedFiles             MusicFile[]
  uploadedHymnals           Hymnal[]
  unavailabilities          MusicianUnavailability[]
  pastorSettings            PastorSettings?
  googleCalendarIntegration GoogleCalendarIntegration?
  church                    Church                     @relation(fields: [churchId], references: [id], onDelete: Cascade)

  @@index([churchId])
  @@index([role])
  @@index([email])
  @@map("users")
}

model GoogleCalendarIntegration {
  id            String   @id @default(cuid())
  userId        String   @unique
  accessToken   String
  refreshToken  String
  scope         String
  tokenType     String   @default("Bearer")
  expiryDate    DateTime?
  isActive      Boolean  @default(true)
  userEmail     String?  // Google account email
  calendarId    String?  // ID of the dedicated church music calendar
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relation to user
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Track synced events
  syncedEvents  GoogleCalendarEvent[]
  
  @@index([userId])
  @@index([isActive])
  @@map("google_calendar_integrations")
}

model GoogleCalendarEvent {
  id                      String                    @id @default(cuid())
  eventId                 String                    // Our internal event ID
  googleEventId           String                    // Google Calendar event ID
  integrationId           String                    // Which integration this belongs to
  lastSyncedAt            DateTime                  @default(now())
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  
  // Relations
  event                   Event                     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  integration             GoogleCalendarIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  
  @@unique([eventId, integrationId]) // One sync per event per integration
  @@index([eventId])
  @@index([integrationId])
  @@index([googleEventId])
  @@map("google_calendar_events")
}

model CustomRole {
  id               String            @id @default(cuid())
  name             String
  churchId         String
  createdAt        DateTime          @default(now())
  church           Church            @relation(fields: [churchId], references: [id], onDelete: Cascade)
  eventAssignments EventAssignment[]

  @@unique([name, churchId])
  @@map("custom_roles")
}

model EventType {
  id        String   @id @default(cuid())
  name      String
  color     String   @default("#3B82F6")
  churchId  String
  createdAt DateTime @default(now())
  church    Church   @relation(fields: [churchId], references: [id], onDelete: Cascade)
  events    Event[]

  @@unique([name, color, churchId])
  @@map("event_types")
}

model Event {
  id                        String                     @id @default(cuid())
  name                      String
  description               String?
  location                  String
  startTime                 DateTime
  endTime                   DateTime?
  isRecurring               Boolean                    @default(false)
  recurrencePattern         String?
  recurrenceEnd             DateTime?
  parentEventId             String?
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  churchId                  String
  eventTypeId               String
  assignedGroups            String[]                   @default([])
  generatedFrom             String?
  isRootEvent               Boolean                    @default(false)
  isModified                Boolean                    @default(false)
  calendarNeedsUpdate       Boolean                    @default(true)
  status                    EventStatus                @default(CONFIRMED)
  cancellationNotifications CancellationNotification[]
  communications            Communication[]
  assignments               EventAssignment[]
  documents                 EventDocument[]
  hymns                     EventHymn[]
  church                    Church                     @relation(fields: [churchId], references: [id], onDelete: Cascade)
  eventType                 EventType                  @relation(fields: [eventTypeId], references: [id])
  musicFiles                MusicFile[]
  notificationLogs          NotificationLog[]
  googleCalendarEvents      GoogleCalendarEvent[]

  @@index([churchId])
  @@index([startTime])
  @@index([churchId, startTime])
  @@index([parentEventId])
  @@index([isRootEvent, churchId])
  @@index([generatedFrom, isModified])
  @@index([calendarNeedsUpdate])
  @@map("events")
}

model Group {
  id          String            @id @default(cuid())
  name        String
  description String?
  churchId    String
  createdAt   DateTime          @default(now())
  // New: multiple leaders for a group
  leaderIds   String[]          @default([])
  assignments EventAssignment[]
  members     GroupMember[]
  church      Church            @relation(fields: [churchId], references: [id], onDelete: Cascade)

  @@unique([name, churchId])
  @@map("groups")
}

model GroupMember {
  id       String   @id @default(cuid())
  userId   String
  groupId  String
  joinedAt DateTime @default(now())
  group    Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@map("group_members")
}

model EventAssignment {
  id             String           @id @default(cuid())
  eventId        String
  userId         String?
  groupId        String?
  roleName       String?
  customRoleId   String?
  maxMusicians   Int?
  status         AssignmentStatus @default(PENDING)
  assignedAt     DateTime         @default(now())
  respondedAt    DateTime?
  isAutoAssigned Boolean          @default(false)
  customRole     CustomRole?      @relation(fields: [customRoleId], references: [id])
  event          Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)
  group          Group?           @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user           User?            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@index([userId])
  @@index([status])
  @@index([userId, status])
  @@map("event_assignments")
}

model MusicFile {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  fileUrl      String
  fileSize     Int
  mimeType     String
  eventId      String
  uploadedBy   String
  uploadedAt   DateTime @default(now())
  event        Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  uploader     User     @relation(fields: [uploadedBy], references: [id])

  @@map("music_files")
}

model Invitation {
  id        String           @id @default(cuid())
  email     String
  firstName String?
  lastName  String?
  phone     String?
  role      UserRole         @default(MUSICIAN)
  status    InvitationStatus @default(PENDING)
  token     String           @unique @default(cuid())
  expiresAt DateTime
  churchId  String
  invitedBy String
  createdAt DateTime         @default(now())
  church    Church           @relation(fields: [churchId], references: [id], onDelete: Cascade)

  @@unique([email, churchId])
  @@index([churchId])
  @@index([status])
  @@index([churchId, status])
  @@index([email])
  @@map("invitations")
}

model Communication {
  id           String            @id @default(cuid())
  subject      String
  message      String
  type         CommunicationType
  churchId     String
  eventId      String?
  sentBy       String
  recipients   String[]
  sentAt       DateTime?
  createdAt    DateTime          @default(now())
  isScheduled  Boolean           @default(false)
  scheduledFor DateTime?
  church       Church            @relation(fields: [churchId], references: [id], onDelete: Cascade)
  event        Event?            @relation(fields: [eventId], references: [id])
  sender       User              @relation(fields: [sentBy], references: [id])

  @@index([isScheduled, sentAt, scheduledFor])
  @@index([churchId])
  @@index([eventId])
  @@map("communications")
}

model Referral {
  id                 String         @id @default(cuid())
  referringChurchId  String
  referredEmail      String
  status             ReferralStatus @default(PENDING)
  completedAt        DateTime?
  createdAt          DateTime       @default(now())
  referralCode       String
  referredChurchId   String?
  referredPersonName String
  rewardProcessed    Boolean        @default(false)
  referredChurch     Church?        @relation("ReferredChurch", fields: [referredChurchId], references: [id], onDelete: Cascade)
  referringChurch    Church         @relation("ReferringChurch", fields: [referringChurchId], references: [id], onDelete: Cascade)

  @@map("referrals")
}

model CommunicationTemplate {
  id        String            @id @default(cuid())
  name      String
  subject   String
  message   String
  type      CommunicationType
  churchId  String
  createdAt DateTime          @default(now())

  @@map("communication_templates")
}

model AdminUser {
  id        String   @id @default(cuid())
  password  String
  email     String   @unique
  createdAt DateTime @default(now())
  role      String   @default("admin")

  @@map("admin_users")
}

model Activity {
  id          String       @id @default(cuid())
  type        ActivityType
  description String
  metadata    Json?
  createdAt   DateTime     @default(now())
  churchId    String
  userId      String?
  church      Church       @relation(fields: [churchId], references: [id], onDelete: Cascade)

  @@map("activities")
}

model ServicePart {
  id         String      @id @default(cuid())
  name       String
  isRequired Boolean     @default(false)
  order      Int         @default(0)
  churchId   String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  eventHymns EventHymn[]
  church     Church      @relation(fields: [churchId], references: [id], onDelete: Cascade)

  @@unique([name, churchId])
  @@map("service_parts")
}

model EventHymn {
  id            String       @id @default(cuid())
  title         String
  notes         String?
  eventId       String
  servicePartId String?
  createdAt     DateTime     @default(now())
  event         Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)
  servicePart   ServicePart? @relation(fields: [servicePartId], references: [id])

  @@map("event_hymns")
}

model EventDocument {
  id               String    @id @default(cuid())
  filename         String
  originalFilename String
  filePath         String
  fileSize         Int
  mimeType         String
  eventId          String
  uploadedBy       String
  uploadedAt       DateTime  @default(now())
  aiProcessed      Boolean   @default(false)
  aiProcessedAt    DateTime?
  aiResults        Json?
  event            Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  uploader         User      @relation(fields: [uploadedBy], references: [id])

  @@map("event_documents")
}

model OwnershipTransfer {
  id                   String                  @id @default(cuid())
  inviteeEmail         String
  inviteeFirstName     String?
  inviteeLastName      String?
  inviteeRole          UserRole
  status               OwnershipTransferStatus @default(PENDING)
  token                String                  @unique @default(cuid())
  expiresAt            DateTime
  retireCurrentOwner   Boolean                 @default(false)
  currentOwnerRetireAt DateTime?
  acceptedAt           DateTime?
  completedAt          DateTime?
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
  churchId             String
  invitedBy            String
  reminderSentAt       DateTime?
  church               Church                  @relation(fields: [churchId], references: [id], onDelete: Cascade)

  @@unique([inviteeEmail, churchId])
  @@map("ownership_transfers")
}

model AutomationSettings {
  id                           String                 @id @default(cuid())
  churchId                     String                 @unique
  pastorEmailEnabled           Boolean                @default(true)
  pastorMonthlyReportDay       Int                    @default(27)
  pastorDailyDigestEnabled     Boolean                @default(true)
  pastorDailyDigestTime        String                 @default("08:00")
  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime               @updatedAt
  pastorWeeklyReportDay        Int                    @default(0)
  pastorWeeklyReportEnabled    Boolean                @default(false)
  allowMusiciansToSendMessages Boolean                @default(false)
  church                       Church                 @relation(fields: [churchId], references: [id], onDelete: Cascade)
  musicianNotifications        MusicianNotification[]

  @@map("automation_settings")
}

model MusicianNotification {
  id                   String             @id @default(cuid())
  automationSettingsId String
  hoursBeforeEvent     Int
  isEnabled            Boolean            @default(true)
  createdAt            DateTime           @default(now())
  automationSettings   AutomationSettings @relation(fields: [automationSettingsId], references: [id], onDelete: Cascade)

  @@map("musician_notifications")
}

model PastorSettings {
  id                   String   @id @default(cuid())
  userId               String   @unique
  dailyDigestEnabled   Boolean  @default(true)
  monthlyReportEnabled Boolean  @default(true)
  timezone             String   @default("America/Chicago")
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("pastor_settings")
}

model NotificationLog {
  id             String           @id @default(cuid())
  type           NotificationType
  churchId       String
  eventId        String?
  recipientEmail String
  recipientName  String
  subject        String
  content        String?
  sentAt         DateTime         @default(now())
  status         String           @default("sent")
  metadata       Json?
  church         Church           @relation(fields: [churchId], references: [id], onDelete: Cascade)
  event          Event?           @relation(fields: [eventId], references: [id])

  @@map("notification_logs")
}

model EmailSchedule {
  id            String    @id @default(cuid())
  churchId      String
  userId        String
  emailType     EmailType
  scheduledFor  DateTime
  sentAt        DateTime?
  attempts      Int       @default(0)
  maxAttempts   Int       @default(3)
  lastAttemptAt DateTime?
  errorReason   String?
  metadata      Json?
  createdAt     DateTime  @default(now())
  church        Church    @relation(fields: [churchId], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([sentAt, scheduledFor, attempts])
  @@index([churchId])
  @@index([scheduledFor])
  @@map("email_schedules")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("password_reset_tokens")
}

model MusicianInviteLink {
  id        String           @id @default(cuid())
  churchId  String           @unique
  slug      String           @unique
  isActive  Boolean          @default(true)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  createdBy String
  pageViews InvitePageView[]
  church    Church           @relation(fields: [churchId], references: [id], onDelete: Cascade)

  @@map("musician_invite_links")
}

model InvitePageView {
  id           String             @id @default(cuid())
  inviteLinkId String
  visitorId    String
  viewedAt     DateTime           @default(now())
  ipAddress    String?
  userAgent    String?
  inviteLink   MusicianInviteLink @relation(fields: [inviteLinkId], references: [id], onDelete: Cascade)

  @@unique([inviteLinkId, visitorId])
  @@map("invite_page_views")
}

model ChurchDocument {
  id               String   @id @default(cuid())
  title            String
  description      String?
  filename         String
  originalFilename String
  filePath         String
  fileSize         Int
  mimeType         String
  order            Int      @default(0)
  churchId         String
  uploadedBy       String
  uploadedAt       DateTime @default(now())
  updatedAt        DateTime @updatedAt
  church           Church   @relation(fields: [churchId], references: [id], onDelete: Cascade)
  uploader         User     @relation(fields: [uploadedBy], references: [id])

  @@map("church_documents")
}

model ChurchLink {
  id          String   @id @default(cuid())
  title       String
  description String?
  url         String
  order       Int      @default(0)
  churchId    String
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  church      Church   @relation(fields: [churchId], references: [id], onDelete: Cascade)
  creator     User     @relation(fields: [createdBy], references: [id])

  @@map("church_links")
}

model Hymnal {
  id          String     @id @default(cuid())
  name        String
  description String?
  churchId    String
  uploadedBy  String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  church      Church     @relation(fields: [churchId], references: [id], onDelete: Cascade)
  uploader    User       @relation(fields: [uploadedBy], references: [id])
  hymns       HymnalHymn[]

  @@map("hymnals")
}

model HymnalHymn {
  id        String   @id @default(cuid())
  hymnalId  String
  title     String
  number    String?  // Could be number or alpha-numeric (e.g., "659", "A-1")
  pageNumber Int?
  composer  String?
  createdAt DateTime @default(now())
  hymnal    Hymnal   @relation(fields: [hymnalId], references: [id], onDelete: Cascade)

  @@unique([hymnalId, number]) // Prevent duplicate numbers in same hymnal
  @@index([hymnalId, title])
  @@index([hymnalId, number])
  @@map("hymnal_hymns")
}

model MusicianUnavailability {
  id        String    @id @default(cuid())
  userId    String
  startDate DateTime?
  endDate   DateTime?
  dayOfWeek Int?
  reason    String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([startDate, endDate])
  @@index([dayOfWeek])
  @@map("musician_unavailabilities")
}

model CancellationNotification {
  id              String    @id @default(cuid())
  eventId         String
  roleName        String?
  cancelledBy     String
  batchKey        String
  sentAt          DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  cancelledByUser User      @relation(fields: [cancelledBy], references: [id])
  event           Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([batchKey, sentAt])
  @@map("cancellation_notifications")
}

model CalendarSubscription {
  id                String             @id @default(cuid())
  userId            String             @unique
  subscriptionToken String             @unique @default(cuid())
  filterType        CalendarFilterType @default(ALL)
  groupIds          String[]           @default([])
  eventTypeIds      String[]           @default([])
  isActive          Boolean            @default(true)
  lastUpdated       DateTime           @default(now())
  feedUrl           String?
  needsUpdate       Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([needsUpdate])
  @@index([subscriptionToken])
  @@map("calendar_subscriptions")
}

model PublicScheduleLink {
  id        String   @id @default(cuid())
  churchId  String
  token     String   @unique @default(cuid())
  startDate DateTime
  endDate   DateTime
  name      String?
  filterType CalendarFilterType @default(ALL)
  groupIds   String[]           @default([])
  eventTypeIds String[]         @default([])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  church    Church   @relation(fields: [churchId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([churchId])
  @@map("public_schedule_links")
}

enum UserRole {
  DIRECTOR
  PASTOR
  ASSOCIATE_PASTOR
  MUSICIAN
  ASSOCIATE_DIRECTOR
}

enum AssignmentStatus {
  PENDING
  ACCEPTED
  DECLINED
  CANCELLED
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}

enum CommunicationType {
  EMAIL
  SMS
  BOTH
}

enum ReferralStatus {
  PENDING
  COMPLETED
  EXPIRED
}

enum ActivityType {
  EVENT_CREATED
  MUSICIAN_INVITED
  MUSICIAN_SIGNED_UP
  MESSAGE_SENT
  AUTOMATED_NOTIFICATION_SENT
  AUTOMATION_SETTINGS_UPDATED
  MUSICIAN_JOINED_VIA_LINK
}

enum OwnershipTransferStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
  COMPLETED
}

enum NotificationType {
  MUSICIAN_EVENT_REMINDER
  PASTOR_DAILY_DIGEST
  PASTOR_MONTHLY_REPORT
  EVENT_CANCELLED
  EVENT_UPDATED
  PASTOR_WEEKLY_REPORT
  MUSICIAN_CANCELLATION
}

enum EmailType {
  WELCOME
  PAYMENT_CONFIRMATION
  REFERRAL_PROMOTION
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  PROFESSIONAL
}

enum CalendarFilterType {
  ALL
  GROUPS
  EVENT_TYPES
}

enum EventStatus {
  CONFIRMED
  TENTATIVE
  CANCELLED
}
