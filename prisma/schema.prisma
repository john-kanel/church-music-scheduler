generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Church {
  id                    String          @id @default(cuid())
  name                  String
  address               String?
  phone                 String?
  email                 String?
  logo                  String?
  stripeCustomerId      String?         @unique
  subscriptionStatus    String          @default("trial")
  subscriptionEnds      DateTime?
  referralCode          String          @unique @default(cuid())
  referredBy            String?
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  referralRewardsEarned Int             @default(0)
  referralRewardsSaved  Decimal         @default(0.00)
  welcomeEmailSentAt    DateTime?
  paymentEmailSentAt    DateTime?
  referralEmailSentAt   DateTime?
  activities            Activity[]
  communications        Communication[]
  customRoles           CustomRole[]
  eventTypes            EventType[]
  events                Event[]
  groups                Group[]
  invitations           Invitation[]
  referredChurches      Referral[]           @relation("ReferredChurch")
  referrals             Referral[]           @relation("ReferringChurch")
  users                 User[]
  ownershipTransfers    OwnershipTransfer[]
  automationSettings    AutomationSettings?
  notificationLogs      NotificationLog[]
  emailSchedules        EmailSchedule[]
  serviceParts          ServicePart[]
  musicianInviteLink    MusicianInviteLink?
  churchDocuments       ChurchDocument[]
  churchLinks           ChurchLink[]

  @@map("parishes")
}

model User {
  id                 String            @id @default(cuid())
  email              String            @unique
  phone              String?
  calendarLink       String?
  firstName          String
  lastName           String
  password           String
  role               UserRole          @default(MUSICIAN)
  isVerified         Boolean           @default(false)
  hasCompletedOnboarding Boolean       @default(false)
  emailNotifications Boolean           @default(true)
  smsNotifications   Boolean           @default(true)
  timezone           String            @default("America/Chicago")
  instruments        String[]          @default([])
  skillLevel         SkillLevel        @default(INTERMEDIATE)
  yearsExperience    Int?
  invitedVia         String?           // Tracks how user joined: 'invitation_link', 'email_invite', 'direct_signup'
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  churchId           String
  sentCommunications Communication[]
  eventAssignments   EventAssignment[]
  groupMemberships   GroupMember[]
  uploadedFiles      MusicFile[]
  church             Church            @relation(fields: [churchId], references: [id], onDelete: Cascade)
  pastorSettings       PastorSettings?
  emailSchedules       EmailSchedule[]
  uploadedDocuments    EventDocument[]
  uploadedChurchDocs   ChurchDocument[]
  createdChurchLinks   ChurchLink[]
  unavailabilities     MusicianUnavailability[]

  @@index([churchId])
  @@index([role])
  @@index([email])
  @@map("users")
}

model CustomRole {
  id               String            @id @default(cuid())
  name             String
  churchId         String
  createdAt        DateTime          @default(now())
  church           Church            @relation(fields: [churchId], references: [id], onDelete: Cascade)
  eventAssignments EventAssignment[]

  @@unique([name, churchId])
  @@map("custom_roles")
}

model EventType {
  id        String   @id @default(cuid())
  name      String
  color     String   @default("#3B82F6")
  churchId  String
  createdAt DateTime @default(now())
  church    Church   @relation(fields: [churchId], references: [id], onDelete: Cascade)
  events    Event[]

  @@unique([name, color, churchId])
  @@map("event_types")
}

model Event {
  id                String            @id @default(cuid())
  name              String
  description       String?
  location          String
  startTime         DateTime
  endTime           DateTime?
  isRecurring       Boolean           @default(false)
  recurrencePattern String?           // JSON string with pattern details
  recurrenceEnd     DateTime?
  parentEventId     String?           // Points to the root event if this is a generated event
  isRootEvent       Boolean           @default(false)  // True for the root recurring event
  generatedFrom     String?           // For generated events, stores the root event ID
  assignedGroups    String[]          @default([])     // Group IDs that auto-assign to this series
  isModified        Boolean           @default(false)  // True if individual event was edited separately from series
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  churchId          String
  eventTypeId       String
  communications    Communication[]
  assignments       EventAssignment[]
  church            Church            @relation(fields: [churchId], references: [id], onDelete: Cascade)
  eventType         EventType         @relation(fields: [eventTypeId], references: [id])
  musicFiles        MusicFile[]
  notificationLogs  NotificationLog[]
  hymns             EventHymn[]
  documents         EventDocument[]

  @@index([churchId])
  @@index([startTime])
  @@index([churchId, startTime])
  @@index([parentEventId])
  @@index([isRootEvent, churchId])
  @@index([generatedFrom, isModified])
  @@map("events")
}

model Group {
  id          String            @id @default(cuid())
  name        String
  description String?
  churchId    String
  createdAt   DateTime          @default(now())
  assignments EventAssignment[]
  members     GroupMember[]
  church      Church            @relation(fields: [churchId], references: [id], onDelete: Cascade)

  @@unique([name, churchId])
  @@map("groups")
}

model GroupMember {
  id       String   @id @default(cuid())
  userId   String
  groupId  String
  joinedAt DateTime @default(now())
  group    Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@map("group_members")
}

model EventAssignment {
  id           String           @id @default(cuid())
  eventId      String
  userId       String?
  groupId      String?
  roleName     String?
  customRoleId String?
  maxMusicians Int?
  status       AssignmentStatus @default(PENDING)
  assignedAt   DateTime         @default(now())
  respondedAt  DateTime?
  customRole   CustomRole?      @relation(fields: [customRoleId], references: [id])
  event        Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)
  group        Group?           @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user         User?            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@index([userId])
  @@index([status])
  @@index([userId, status])
  @@map("event_assignments")
}

model MusicFile {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  fileUrl      String
  fileSize     Int
  mimeType     String
  eventId      String
  uploadedBy   String
  uploadedAt   DateTime @default(now())
  event        Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  uploader     User     @relation(fields: [uploadedBy], references: [id])

  @@map("music_files")
}

model Invitation {
  id        String           @id @default(cuid())
  email     String
  firstName String?
  lastName  String?
  phone     String?
  role      UserRole         @default(MUSICIAN)
  status    InvitationStatus @default(PENDING)
  token     String           @unique @default(cuid())
  expiresAt DateTime
  churchId  String
  invitedBy String
  createdAt DateTime         @default(now())
  church    Church           @relation(fields: [churchId], references: [id], onDelete: Cascade)

  @@unique([email, churchId])
  @@index([churchId])
  @@index([status])
  @@index([churchId, status])
  @@index([email])
  @@map("invitations")
}

model Communication {
  id             String            @id @default(cuid())
  subject        String
  message        String
  type           CommunicationType
  churchId       String
  eventId        String?
  sentBy         String
  recipients     String[]
  sentAt         DateTime?
  scheduledFor   DateTime?
  isScheduled    Boolean           @default(false)
  createdAt      DateTime          @default(now())
  church         Church            @relation(fields: [churchId], references: [id], onDelete: Cascade)
  event          Event?            @relation(fields: [eventId], references: [id])
  sender         User              @relation(fields: [sentBy], references: [id])

  @@map("communications")
}

model Referral {
  id                 String         @id @default(cuid())
  referringChurchId  String
  referredEmail      String
  status             ReferralStatus @default(PENDING)
  completedAt        DateTime?
  createdAt          DateTime       @default(now())
  referralCode       String
  referredChurchId   String?
  referredPersonName String
  rewardProcessed    Boolean        @default(false)
  referredChurch     Church?        @relation("ReferredChurch", fields: [referredChurchId], references: [id], onDelete: Cascade)
  referringChurch    Church         @relation("ReferringChurch", fields: [referringChurchId], references: [id], onDelete: Cascade)

  @@map("referrals")
}

model CommunicationTemplate {
  id        String            @id @default(cuid())
  name      String
  subject   String
  message   String
  type      CommunicationType
  churchId  String
  createdAt DateTime          @default(now())

  @@map("communication_templates")
}

model AdminUser {
  id        String   @id @default(cuid())
  password  String
  email     String   @unique
  createdAt DateTime @default(now())
  role      String   @default("admin")

  @@map("admin_users")
}

model Activity {
  id          String       @id @default(cuid())
  type        ActivityType
  description String
  metadata    Json?
  createdAt   DateTime     @default(now())
  churchId    String
  userId      String?
  church      Church       @relation(fields: [churchId], references: [id], onDelete: Cascade)

  @@map("activities")
}



model ServicePart {
  id            String         @id @default(cuid())
  name          String
  isRequired    Boolean        @default(false)
  order         Int            @default(0)
  churchId      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  church        Church         @relation(fields: [churchId], references: [id], onDelete: Cascade)
  eventHymns    EventHymn[]

  @@unique([name, churchId])
  @@map("service_parts")
}

model EventHymn {
  id            String      @id @default(cuid())
  title         String
  notes         String?
  eventId       String
  servicePartId String?
  createdAt     DateTime    @default(now())
  event         Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  servicePart   ServicePart? @relation(fields: [servicePartId], references: [id])

  @@map("event_hymns")
}

model EventDocument {
  id               String   @id @default(cuid())
  filename         String
  originalFilename String
  filePath         String
  fileSize         Int
  mimeType         String
  eventId          String
  uploadedBy       String
  uploadedAt       DateTime @default(now())
  aiProcessed      Boolean  @default(false)
  aiProcessedAt    DateTime?
  aiResults        Json?
  event            Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  uploader         User     @relation(fields: [uploadedBy], references: [id])

  @@map("event_documents")
}

model OwnershipTransfer {
  id                    String                     @id @default(cuid())
  inviteeEmail          String
  inviteeFirstName      String?
  inviteeLastName       String?
  inviteeRole           UserRole                   // The role they'll have (DIRECTOR, PASTOR, etc.)
  status                OwnershipTransferStatus    @default(PENDING)
  token                 String                     @unique @default(cuid())
  expiresAt             DateTime                   // 30 days from creation
  retireCurrentOwner    Boolean                    @default(false)
  currentOwnerRetireAt  DateTime?                  // Set if retireCurrentOwner is true
  acceptedAt            DateTime?
  completedAt           DateTime?
  createdAt             DateTime                   @default(now())
  updatedAt             DateTime                   @updatedAt
  churchId              String
  invitedBy             String                     // User ID of who sent the invite
  reminderSentAt        DateTime?                  // Track when 20-day reminder was sent
  church                Church                     @relation(fields: [churchId], references: [id], onDelete: Cascade)

  @@unique([inviteeEmail, churchId])
  @@map("ownership_transfers")
}

model AutomationSettings {
  id                        String                  @id @default(cuid())
  churchId                  String                  @unique
  
  // Musician Notification Settings
  musicianNotifications     MusicianNotification[]
  
  // Musician Permission Settings
  allowMusiciansToSendMessages Boolean              @default(false) // Allow musicians to send messages to other musicians
  
  // Pastor Notification Settings  
  pastorEmailEnabled        Boolean                 @default(true)
  pastorMonthlyReportDay    Int                     @default(27) // Day of month to send monthly report
  pastorWeeklyReportEnabled Boolean                 @default(false)
  pastorWeeklyReportDay     Int                     @default(0) // Day of week to send weekly report (0=Sunday, 6=Saturday) - Sunday=current week, Mon-Sat=next week
  pastorDailyDigestEnabled  Boolean                 @default(true)
  pastorDailyDigestTime     String                  @default("08:00") // Time to send daily digest (24hr format)
  
  createdAt                 DateTime                @default(now())
  updatedAt                 DateTime                @updatedAt
  church                    Church                  @relation(fields: [churchId], references: [id], onDelete: Cascade)

  @@map("automation_settings")
}

model MusicianNotification {
  id                   String              @id @default(cuid())
  automationSettingsId String
  hoursBeforeEvent     Int                 // Hours before event to send notification
  isEnabled            Boolean             @default(true)
  createdAt            DateTime            @default(now())
  automationSettings   AutomationSettings  @relation(fields: [automationSettingsId], references: [id], onDelete: Cascade)

  @@map("musician_notifications")
}

model PastorSettings {
  id                    String   @id @default(cuid())
  userId                String   @unique
  dailyDigestEnabled    Boolean  @default(true)
  monthlyReportEnabled  Boolean  @default(true)
  timezone              String   @default("America/Chicago")
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("pastor_settings")
}

model NotificationLog {
  id              String           @id @default(cuid())
  type            NotificationType
  churchId        String
  eventId         String?
  recipientEmail  String
  recipientName   String
  subject         String
  content         String?
  sentAt          DateTime         @default(now())
  status          String           @default("sent")
  metadata        Json?            // Store additional data like hours_before_event, etc.
  church          Church           @relation(fields: [churchId], references: [id], onDelete: Cascade)
  event           Event?           @relation(fields: [eventId], references: [id])

  @@map("notification_logs")
}

model EmailSchedule {
  id                String    @id @default(cuid())
  churchId          String
  userId            String
  emailType         EmailType
  scheduledFor      DateTime
  sentAt            DateTime?
  attempts          Int       @default(0)
  maxAttempts       Int       @default(3)
  lastAttemptAt     DateTime?
  errorReason       String?
  metadata          Json?
  createdAt         DateTime  @default(now())
  church            Church    @relation(fields: [churchId], references: [id], onDelete: Cascade)
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_schedules")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("password_reset_tokens")
}

model MusicianInviteLink {
  id           String            @id @default(cuid())
  churchId     String            @unique
  slug         String            @unique  // URL-friendly church name slug
  isActive     Boolean           @default(true)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  createdBy    String            // User ID who created the link
  pageViews    InvitePageView[]
  church       Church            @relation(fields: [churchId], references: [id], onDelete: Cascade)

  @@map("musician_invite_links")
}

model InvitePageView {
  id             String             @id @default(cuid())
  inviteLinkId   String
  visitorId      String             // Hash of IP + User Agent for unique visitor tracking
  viewedAt       DateTime           @default(now())
  ipAddress      String?            // Optional: store for analytics
  userAgent      String?            // Optional: store for analytics
  inviteLink     MusicianInviteLink @relation(fields: [inviteLinkId], references: [id], onDelete: Cascade)

  @@unique([inviteLinkId, visitorId])  // Prevent duplicate views from same visitor
  @@map("invite_page_views")
}

model ChurchDocument {
  id               String   @id @default(cuid())
  title            String
  description      String?
  filename         String   // S3 key
  originalFilename String
  filePath         String   // S3 URL
  fileSize         Int
  mimeType         String
  order            Int      @default(0)
  churchId         String
  uploadedBy       String
  uploadedAt       DateTime @default(now())
  updatedAt        DateTime @updatedAt
  church           Church   @relation(fields: [churchId], references: [id], onDelete: Cascade)
  uploader         User     @relation(fields: [uploadedBy], references: [id])

  @@map("church_documents")
}

model ChurchLink {
  id          String   @id @default(cuid())
  title       String
  description String?
  url         String
  order       Int      @default(0)
  churchId    String
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  church      Church   @relation(fields: [churchId], references: [id], onDelete: Cascade)
  creator     User     @relation(fields: [createdBy], references: [id])

  @@map("church_links")
}

model MusicianUnavailability {
  id        String    @id @default(cuid())
  userId    String
  
  // For specific dates or date ranges
  startDate DateTime?
  endDate   DateTime? // null for single dates, same as startDate for ranges
  
  // For recurring weekly unavailability (0 = Sunday, 6 = Saturday)
  dayOfWeek Int?      // null for date-based, 0-6 for day-based
  
  // Metadata
  reason    String?   // optional reason/note
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([startDate, endDate])
  @@index([dayOfWeek])
  @@map("musician_unavailabilities")
}

enum UserRole {
  DIRECTOR
  ASSOCIATE_DIRECTOR
  PASTOR
  ASSOCIATE_PASTOR
  MUSICIAN
}

enum AssignmentStatus {
  PENDING
  ACCEPTED
  DECLINED
  CANCELLED
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}

enum CommunicationType {
  EMAIL
  SMS
  BOTH
}

enum ReferralStatus {
  PENDING
  COMPLETED
  EXPIRED
}

enum ActivityType {
  EVENT_CREATED
  MUSICIAN_INVITED
  MUSICIAN_SIGNED_UP
  MUSICIAN_JOINED_VIA_LINK
  MESSAGE_SENT
  AUTOMATED_NOTIFICATION_SENT
  AUTOMATION_SETTINGS_UPDATED
}

enum OwnershipTransferStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
  COMPLETED
}

enum NotificationType {
  MUSICIAN_EVENT_REMINDER
  PASTOR_DAILY_DIGEST
  PASTOR_MONTHLY_REPORT
  PASTOR_WEEKLY_REPORT
  EVENT_CANCELLED
  EVENT_UPDATED
}

enum EmailType {
  WELCOME
  PAYMENT_CONFIRMATION
  REFERRAL_PROMOTION
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  PROFESSIONAL
}
