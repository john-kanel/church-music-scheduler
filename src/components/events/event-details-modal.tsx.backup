'use client'

import { useState, useEffect } from 'react'
import { useSession } from 'next-auth/react'
import { 
  X, Calendar, Clock, MapPin, Users, Edit, Save, Trash2, 
  UserPlus, MessageCircle, Check, AlertTriangle, XCircle,
  Download, Upload, Music
} from 'lucide-react'
import { InviteModal } from '../musicians/invite-modal'
import { SendMessageModal } from '../messages/send-message-modal'

interface EventDetailsModalProps {
  isOpen: boolean
  onClose: () => void
  event: CalendarEvent | null
  onEventUpdated?: () => void
  onEventDeleted?: () => void
}

interface CalendarEvent {
  id: string
  name: string
  description?: string
  location?: string
  startTime: string
  endTime?: string
  eventType: {
    id: string
    name: string
    color: string
  }
  templateId?: string
  status?: 'confirmed' | 'tentative' | 'cancelled'
  assignments?: {
    id: string
    roleName: string
    status: string
    maxMusicians?: number
    user?: {
      id: string
      firstName: string
      lastName: string
      email: string
    }
    group?: {
      id: string
      name: string
    }
  }[]
  musicFiles?: any[]
}

interface Musician {
  id: string
  firstName: string
  lastName: string
  email: string
  instrument?: string
}

export function EventDetailsModal({ 
  isOpen, 
  onClose, 
  event, 
  onEventUpdated, 
  onEventDeleted 
}: EventDetailsModalProps) {
  const { data: session } = useSession()
  const [isEditing, setIsEditing] = useState(false)
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')
  const [success, setSuccess] = useState('')
  const [musicians, setMusicians] = useState<Musician[]>([])
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false)
  const [showInviteModal, setShowInviteModal] = useState(false)
  const [showMessageModal, setShowMessageModal] = useState(false)
  const [openDropdowns, setOpenDropdowns] = useState<{ [key: string]: boolean }>({})
  const [searchTexts, setSearchTexts] = useState<{ [key: string]: string }>({})

  const [editData, setEditData] = useState({
    name: '',
    description: '',
    location: '',
    startDate: '',
    startTime: '',
    endTime: '',
    status: 'confirmed' as 'confirmed' | 'tentative' | 'cancelled'
  })

  // Set edit data when event changes or editing mode starts
  useEffect(() => {
    if (event && isEditing) {
      const startDate = new Date(event.startTime)
      const endDate = event.endTime ? new Date(event.endTime) : null
      
      setEditData({
        name: event.name,
        description: event.description || '',
        location: event.location || '',
        startDate: startDate.toISOString().split('T')[0],
        startTime: startDate.toTimeString().slice(0, 5),
        endTime: endDate ? endDate.toTimeString().slice(0, 5) : '',
        status: event.status || 'confirmed'
      })
    }
  }, [event, isEditing])

  // Check if user is director
  const isDirector = session?.user?.role === 'DIRECTOR' || session?.user?.role === 'PASTOR'

  // Fetch musicians for assignment
  useEffect(() => {
    if (isOpen && isDirector) {
      fetchMusicians()
    }
  }, [isOpen, isDirector])

  // Close dropdowns when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      const target = event.target as Element
      // Don't close if clicking inside a dropdown or search input
      if (target.closest('.dropdown-container')) return
      
      // Close all dropdowns if clicking outside
      setOpenDropdowns({})
      setSearchTexts({})
    }

    if (Object.values(openDropdowns).some(Boolean)) {
      document.addEventListener('mousedown', handleClickOutside)
      return () => document.removeEventListener('mousedown', handleClickOutside)
    }
  }, [openDropdowns])

  const fetchMusicians = async () => {
    try {
      const response = await fetch('/api/musicians?verified=true')
      if (response.ok) {
        const data = await response.json()
        setMusicians(data.musicians || [])
      }
    } catch (error) {
      console.error('Error fetching musicians:', error)
    }
  }

  const handleEdit = () => {
    setIsEditing(true)
    setError('')
    setSuccess('')
  }

  const handleCancelEdit = () => {
    setIsEditing(false)
    setError('')
    setSuccess('')
  }

  const handleSave = async () => {
    if (!event) return
    
    setLoading(true)
    setError('')
    setSuccess('')

    try {
      const response = await fetch(`/api/events/${event.id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(editData)
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || 'Failed to update event')
      }

      setSuccess('Event updated successfully!')
      setIsEditing(false)
      
      setTimeout(() => {
        onEventUpdated?.()
        setSuccess('')
      }, 1500)
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to update event')
    } finally {
      setLoading(false)
    }
  }

  const handleDelete = async () => {
    if (!event) return
    
    setLoading(true)
    setError('')

    try {
      const response = await fetch(`/api/events/${event.id}`, {
        method: 'DELETE'
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || 'Failed to delete event')
      }

      onEventDeleted?.()
      onClose()
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to delete event')
    } finally {
      setLoading(false)
      setShowDeleteConfirm(false)
    }
  }

  const fetchEventData = async () => {
    if (!event?.id) return
    
    try {
      const response = await fetch(`/api/events/${event.id}`)
      if (response.ok) {
        const data = await response.json()
        // Don't call onEventUpdated here as it closes the modal
        // Just refresh the parent component's events list quietly
      }
    } catch (error) {
      console.error('Failed to refresh event data:', error)
    }
  }

  const handleAssignMusician = async (assignmentId: string, musicianId: string) => {
    try {
      setLoading(true)
      setError('')
      
      const response = await fetch(`/api/assignments/${assignmentId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ musicianId })
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || 'Failed to assign musician')
      }

      setSuccess('Musician assigned successfully!')
      // Close the dropdown and clear search text
      setOpenDropdowns(prev => ({ ...prev, [assignmentId]: false }))
      setSearchTexts(prev => ({ ...prev, [assignmentId]: '' }))
      
      // Refresh event data without closing modal
      await fetchEventData()
      
      // Clear success message after delay
      setTimeout(() => {
        setSuccess('')
      }, 2000)
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to assign musician')
    } finally {
      setLoading(false)
    }
  }

  const handleRemoveMusician = async (assignmentId: string) => {
    try {
      setLoading(true)
      setError('')
      
      const response = await fetch(`/api/assignments/${assignmentId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ musicianId: null })
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || 'Failed to remove musician')
      }

      setSuccess('Musician removed successfully!')
      
      // Refresh event data without closing modal
      await fetchEventData()
      
      // Clear success message after delay
      setTimeout(() => {
        setSuccess('')
      }, 2000)
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to remove musician')
    } finally {
      setLoading(false)
    }
  }

  // Filter musicians based on search text
  const getFilteredMusicians = (assignmentId: string) => {
    const searchText = searchTexts[assignmentId] || ''
    if (!searchText.trim()) {
      return musicians
    }
    
    return musicians.filter(musician => 
      `${musician.firstName} ${musician.lastName}`.toLowerCase().includes(searchText.toLowerCase())
    )
  }

  // Handle search text change
  const handleSearchChange = (assignmentId: string, value: string) => {
    setSearchTexts(prev => ({ ...prev, [assignmentId]: value }))
  }

  const toggleDropdown = (assignmentId: string) => {
    setOpenDropdowns(prev => ({
      ...prev,
      [assignmentId]: !prev[assignmentId]
    }))
    
    // Clear search text when opening
    if (!openDropdowns[assignmentId]) {
      setSearchTexts(prev => ({ ...prev, [assignmentId]: '' }))
    }
  }

  const getStatusIcon = (status?: string) => {
    switch (status) {
      case 'confirmed':
        return <Check className="h-4 w-4 text-green-600" />
      case 'tentative':
        return <AlertTriangle className="h-4 w-4 text-yellow-600" />
      case 'cancelled':
        return <XCircle className="h-4 w-4 text-red-600" />
      default:
        return <Check className="h-4 w-4 text-green-600" />
    }
  }

  const getStatusColor = (status?: string) => {
    switch (status) {
      case 'confirmed':
        return 'text-green-600 bg-green-50 border-green-200'
      case 'tentative':
        return 'text-yellow-600 bg-yellow-50 border-yellow-200'
      case 'cancelled':
        return 'text-red-600 bg-red-50 border-red-200'
      default:
        return 'text-green-600 bg-green-50 border-green-200'
    }
  }

  if (!isOpen || !event) return null

  const eventDate = new Date(event.startTime)
  const eventEndDate = event.endTime ? new Date(event.endTime) : null
  
  const timeString = eventDate.toLocaleTimeString('en-US', {
    hour: 'numeric',
    minute: '2-digit',
    hour12: true
  })
  
  const endTimeString = eventEndDate ? eventEndDate.toLocaleTimeString('en-US', {
    hour: 'numeric',
    minute: '2-digit',
    hour12: true
  }) : null

  const dateString = eventDate.toLocaleDateString('en-US', {
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  })

  return (
    <div className="fixed inset-0 bg-gray-500 bg-opacity-50 z-50 flex items-center justify-center p-4">
      <div className="bg-white rounded-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b">
          <div className="flex items-center">
            <div
              className="w-4 h-4 rounded-full mr-3"
              style={{ backgroundColor: event.eventType.color }}
            />
            <div>
              <h2 className="text-xl font-bold text-gray-900">
                {isEditing ? (
                  <input
                    type="text"
                    value={editData.name}
                    onChange={(e) => setEditData(prev => ({ ...prev, name: e.target.value }))}
                    className="text-xl font-bold bg-transparent border-b border-gray-300 focus:border-blue-500 focus:outline-none"
                  />
                ) : (
                  event.name
                )}
              </h2>
              <p className="text-sm text-gray-600">{event.eventType.name}</p>
            </div>
          </div>
          <div className="flex items-center space-x-2">
            {isDirector && !isEditing && (
              <>
                <button
                  onClick={handleEdit}
                  className="p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-lg transition-colors"
                  title="Edit event"
                >
                  <Edit className="h-4 w-4" />
                </button>
                <button
                  onClick={() => setShowDeleteConfirm(true)}
                  className="p-2 text-gray-400 hover:text-red-600 hover:bg-red-50 rounded-lg transition-colors"
                  title="Delete event"
                >
                  <Trash2 className="h-4 w-4" />
                </button>
              </>
            )}
            <button
              onClick={isEditing ? handleCancelEdit : onClose}
              disabled={loading}
              className="p-2 hover:bg-gray-100 rounded-lg transition-colors text-gray-700 hover:text-gray-900 disabled:opacity-50"
            >
              <X className="h-5 w-5" />
            </button>
          </div>
        </div>

        <div className="p-6 space-y-6">
          {/* Status Messages */}
          {error && (
            <div className="bg-red-50 border border-red-200 rounded-lg p-4">
              <p className="text-red-600 text-sm">{error}</p>
            </div>
          )}

          {success && (
            <div className="bg-green-50 border border-green-200 rounded-lg p-4">
              <p className="text-green-600 text-sm flex items-center">
                <Check className="h-4 w-4 mr-2" />
                {success}
              </p>
            </div>
          )}

          {/* Event Status */}
          <div className="flex items-center justify-between">
            <h3 className="text-lg font-semibold text-gray-900">Event Status</h3>
            {isEditing ? (
              <select
                value={editData.status}
                onChange={(e) => setEditData(prev => ({ ...prev, status: e.target.value as any }))}
                className="px-3 py-1 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="confirmed">Confirmed</option>
                <option value="tentative">Tentative</option>
                <option value="cancelled">Cancelled</option>
              </select>
            ) : (
              <div className={`flex items-center px-3 py-1 rounded-full border ${getStatusColor(event.status)}`}>
                {getStatusIcon(event.status)}
                <span className="ml-2 text-sm font-medium capitalize">
                  {event.status || 'Confirmed'}
                </span>
              </div>
            )}
          </div>

          {/* Event Details */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* Date & Time */}
            <div className="space-y-4">
              <h3 className="text-lg font-semibold text-gray-900">Date & Time</h3>
              
              {isEditing ? (
                <div className="space-y-3">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Date</label>
                    <input
                      type="date"
                      value={editData.startDate}
                      onChange={(e) => setEditData(prev => ({ ...prev, startDate: e.target.value }))}
                      className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                  <div className="grid grid-cols-2 gap-3">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Start Time</label>
                      <input
                        type="time"
                        value={editData.startTime}
                        onChange={(e) => setEditData(prev => ({ ...prev, startTime: e.target.value }))}
                        className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">End Time</label>
                      <input
                        type="time"
                        value={editData.endTime}
                        onChange={(e) => setEditData(prev => ({ ...prev, endTime: e.target.value }))}
                        className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                      />
                    </div>
                  </div>
                </div>
              ) : (
                <div className="space-y-2">
                  <div className="flex items-center text-gray-700">
                    <Calendar className="h-4 w-4 mr-2 text-blue-600" />
                    <span>{dateString}</span>
                  </div>
                  <div className="flex items-center text-gray-700">
                    <Clock className="h-4 w-4 mr-2 text-blue-600" />
                    <span>{timeString}{endTimeString ? ` - ${endTimeString}` : ''}</span>
                  </div>
                </div>
              )}
            </div>

            {/* Location */}
            <div className="space-y-4">
              <h3 className="text-lg font-semibold text-gray-900">Location</h3>
              {isEditing ? (
                <input
                  type="text"
                  value={editData.location}
                  onChange={(e) => setEditData(prev => ({ ...prev, location: e.target.value }))}
                  className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="Event location..."
                />
              ) : (
                <div className="flex items-center text-gray-700">
                  <MapPin className="h-4 w-4 mr-2 text-blue-600" />
                  <span>{event.location || 'No location specified'}</span>
                </div>
              )}
            </div>
          </div>

          {/* Description */}
          <div className="space-y-4">
            <h3 className="text-lg font-semibold text-gray-900">Description</h3>
            {isEditing ? (
              <textarea
                value={editData.description}
                onChange={(e) => setEditData(prev => ({ ...prev, description: e.target.value }))}
                className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                rows={3}
                placeholder="Event description..."
              />
            ) : (
              <p className="text-gray-700">{event.description || 'No description provided'}</p>
            )}
          </div>

          {/* Assigned Musicians */}
          <div className="space-y-4">
            <div className="flex items-center">
              <h3 className="text-lg font-semibold text-gray-900 flex items-center">
                <Users className="h-5 w-5 mr-2 text-blue-600" />
                Musicians & Roles ({event.assignments?.length || 0})
              </h3>
            </div>
            
            {event.assignments && event.assignments.length > 0 ? (
              <div className="space-y-2">
                {event.assignments.map((assignment) => (
                  <div key={assignment.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                    <div className="flex items-center">
                      <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center mr-3">
                        <Music className="h-4 w-4 text-blue-600" />
                      </div>
                      <div>
                        <div className="font-medium text-gray-900">{assignment.roleName}</div>
                        {assignment.user ? (
                          <div className="text-sm text-gray-600">
                            {assignment.user.firstName} {assignment.user.lastName}
                          </div>
                        ) : assignment.group ? (
                          <div className="text-sm text-gray-600">
                            {assignment.group.name} (Group)
                          </div>
                        ) : (
                          <div className="text-sm text-gray-500">Open position</div>
                        )}
                      </div>
                    </div>
                    <div className="flex items-center space-x-2 relative">
                      {/* Show assigned musician with edit option or assign button */}
                      {assignment.user ? (
                        <div className="flex items-center space-x-2 group">
                          <div className="text-sm text-gray-900">
                            <span className="font-medium">{assignment.user.firstName} {assignment.user.lastName}</span>
                          </div>
                          {/* Edit and Remove buttons for directors - only in edit mode */}
                          {isDirector && isEditing && (
                            <div className="flex items-center space-x-1">
                              {/* Remove musician button - visible on hover */}
                              <button
                                onClick={() => handleRemoveMusician(assignment.id)}
                                className="p-1 text-gray-400 hover:text-red-600 transition-colors opacity-0 group-hover:opacity-100"
                                title="Remove musician from role"
                                disabled={loading}
                              >
                                <X className="h-4 w-4" />
                              </button>
                              {/* Edit/change musician button */}
                              <div className="relative">
                                <button
                                  onClick={() => toggleDropdown(assignment.id)}
                                  className="p-1 text-gray-400 hover:text-blue-600 transition-colors"
                                  title="Change musician assignment"
                                  disabled={loading}
                                >
                                  <Edit className="h-4 w-4" />
                                </button>
                              
                                {/* Searchable Dropdown Menu */}
                                {openDropdowns[assignment.id] && (
                                  <div className="dropdown-container absolute right-0 top-full mt-1 w-64 bg-white border border-gray-200 rounded-lg shadow-lg z-10">
                                    <div className="p-2 border-b border-gray-200">
                                      <input
                                        type="text"
                                        placeholder="Search musicians..."
                                        value={searchTexts[assignment.id] || ''}
                                        onChange={(e) => handleSearchChange(assignment.id, e.target.value)}
                                        className="w-full px-2 py-1 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm"
                                        autoFocus
                                      />
                                    </div>
                                    <div className="max-h-48 overflow-y-auto">
                                      {getFilteredMusicians(assignment.id).length > 0 ? (
                                        <>
                                          {getFilteredMusicians(assignment.id).map((musician) => (
                                            <button
                                              key={musician.id}
                                              onClick={() => handleAssignMusician(assignment.id, musician.id)}
                                              className="w-full text-left px-3 py-2 hover:bg-gray-50 flex items-center space-x-2 border-b border-gray-100 last:border-b-0 disabled:opacity-50"
                                              disabled={loading}
                                            >
                                              <div className="w-6 h-6 bg-blue-100 rounded-full flex items-center justify-center">
                                                <Users className="h-3 w-3 text-blue-600" />
                                              </div>
                                              <div className="flex-1">
                                                <div className="text-sm font-medium text-gray-900">
                                                  {musician.firstName} {musician.lastName}
                                                </div>
                                                <div className="text-xs text-gray-500">
                                                  {musician.email}
                                                </div>
                                                {musician.instrument && (
                                                  <div className="text-xs text-blue-600">
                                                    {musician.instrument}
                                                  </div>
                                                )}
                                              </div>
                                            </button>
                                          ))}
                                        </>
                                      ) : (
                                        <div className="px-3 py-2 text-sm text-gray-500 text-center">
                                          {searchTexts[assignment.id] ? 'No musicians found' : 'No musicians available'}
                                        </div>
                                      )}
                                    </div>
                                  </div>
                                )}
                              </div>
                            </div>
                          )}
                        </div>
                      ) : (
                        /* Show assign musician button for open positions */
                        isDirector && isEditing ? (
                          <div className="relative">
                            <button
                              onClick={() => toggleDropdown(assignment.id)}
                              className="flex items-center px-3 py-1 text-sm bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50"
                              disabled={loading}
                            >
                              {loading ? (
                                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-1"></div>
                              ) : (
                                <UserPlus className="h-4 w-4 mr-1" />
                              )}
                              Assign Musician
                            </button>
                            
                            {/* Searchable Dropdown Menu */}
                            {openDropdowns[assignment.id] && (
                              <div className="dropdown-container absolute right-0 top-full mt-1 w-64 bg-white border border-gray-200 rounded-lg shadow-lg z-10">
                                <div className="p-2 border-b border-gray-200">
                                  <input
                                    type="text"
                                    placeholder="Search musicians..."
                                    value={searchTexts[assignment.id] || ''}
                                    onChange={(e) => handleSearchChange(assignment.id, e.target.value)}
                                    className="w-full px-2 py-1 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm"
                                    autoFocus
                                  />
                                </div>
                                <div className="max-h-48 overflow-y-auto">
                                  {getFilteredMusicians(assignment.id).length > 0 ? (
                                    <>
                                      {getFilteredMusicians(assignment.id).map((musician) => (
                                        <button
                                          key={musician.id}
                                          onClick={() => handleAssignMusician(assignment.id, musician.id)}
                                          className="w-full text-left px-3 py-2 hover:bg-gray-50 flex items-center space-x-2 border-b border-gray-100 last:border-b-0 disabled:opacity-50"
                                          disabled={loading}
                                        >
                                          <div className="w-6 h-6 bg-blue-100 rounded-full flex items-center justify-center">
                                            <Users className="h-3 w-3 text-blue-600" />
                                          </div>
                                          <div className="flex-1">
                                            <div className="text-sm font-medium text-gray-900">
                                              {musician.firstName} {musician.lastName}
                                            </div>
                                            <div className="text-xs text-gray-500">
                                              {musician.email}
                                            </div>
                                            {musician.instrument && (
                                              <div className="text-xs text-blue-600">
                                                {musician.instrument}
                                              </div>
                                            )}
                                          </div>
                                        </button>
                                      ))}
                                    </>
                                  ) : (
                                    <div className="px-3 py-2 text-sm text-gray-500 text-center">
                                      {searchTexts[assignment.id] ? 'No musicians found' : 'No musicians available'}
                                    </div>
                                  )}
                                </div>
                              </div>
                            )}
                          </div>
                        ) : (
                          /* Show status for non-directors or non-editing mode */
                          <span className={`px-2 py-1 text-xs rounded-full ${
                            assignment.status === 'CONFIRMED' 
                              ? 'bg-green-100 text-green-800'
                              : assignment.status === 'PENDING'
                              ? 'bg-yellow-100 text-yellow-800'
                              : 'bg-red-100 text-red-800'
                          }`}>
                            {assignment.status || 'OPEN'}
                          </span>
                        )
                      )}
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-8 text-gray-500">
                <Users className="h-8 w-8 mx-auto mb-2" />
                <p>No musicians assigned yet</p>
              </div>
            )}
          </div>

          {/* Quick Actions */}
          {isDirector && !isEditing && (
            <div className="flex flex-wrap gap-2 pt-4 border-t">
              <button
                onClick={() => setShowMessageModal(true)}
                className="flex items-center px-3 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors text-sm"
              >
                <MessageCircle className="h-4 w-4 mr-1" />
                Message Musicians
              </button>
            </div>
          )}

          {/* Save/Cancel Buttons for Editing */}
          {isEditing && (
            <div className="flex justify-end space-x-3 pt-4 border-t">
              <button
                onClick={handleCancelEdit}
                disabled={loading}
                className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors disabled:opacity-50"
              >
                Cancel
              </button>
              <button
                onClick={handleSave}
                disabled={loading || !editData.name || !editData.location}
                className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 flex items-center"
              >
                {loading ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                    Saving...
                  </>
                ) : (
                  <>
                    <Save className="h-4 w-4 mr-2" />
                    Save Changes
                  </>
                )}
              </button>
            </div>
          )}
        </div>

        {/* Delete Confirmation Modal */}
        {showDeleteConfirm && (
          <div className="absolute inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center p-4">
            <div className="bg-white rounded-lg p-6 max-w-md w-full">
              <h3 className="text-lg font-medium text-gray-900 mb-4">Delete Event</h3>
              <p className="text-sm text-gray-600 mb-6">
                Are you sure you want to delete this event? This action cannot be undone.
              </p>
              <div className="flex justify-end space-x-3">
                <button
                  onClick={() => setShowDeleteConfirm(false)}
                  className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
                >
                  Cancel
                </button>
                <button
                  onClick={handleDelete}
                  disabled={loading}
                  className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors disabled:opacity-50"
                >
                  {loading ? 'Deleting...' : 'Delete'}
                </button>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Invite Modal */}
      <InviteModal
        isOpen={showInviteModal}
        onClose={() => setShowInviteModal(false)}
        onInvitesSent={() => {
          setShowInviteModal(false)
          fetchMusicians()
        }}
      />

      {/* Message Modal */}
      <SendMessageModal
        isOpen={showMessageModal}
        onClose={() => setShowMessageModal(false)}
        onMessageSent={() => setShowMessageModal(false)}
      />
    </div>
  )
} 